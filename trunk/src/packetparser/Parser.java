/* Generated By:JavaCC: Do not edit this line. Parser.java */
package packetparser;

public class Parser extends PDL implements ParserConstants {

  static final public void TranslationUnit() throws ParseException {
    label_1:
    while (true) {
      Definition();
      if (jj_2_1(1)) {
        ;
      } else {
        break label_1;
      }
    }
  }

  static final public void Definition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPEDEF:
      TypedefDeclaration();
      break;
    default:
      jj_la1[0] = jj_gen;
      if (jj_2_2(1)) {
        VariableDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Assignment();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void TypedefDeclaration() throws ParseException {
                              Token t = null; TypeSpecifier typeSpec = null;
   PacketTemplate packetType = null;
    jj_consume_token(TYPEDEF);
    typeSpec = TypeSpecifier();
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(50);
            typeSpec.typeName = t.image;
        if (parser.verbose) System.out.println("TypedefDeclaration of " + typeSpec.typeName);
            parser.addType( typeSpec.typeName, typeSpec );
  }

  static final public void VariableDeclaration() throws ParseException {
                              TypeSpecifier typeSpec; String name = null; String value = "";
    typeSpec = TypeSpecifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      name = jj_consume_token(IDENTIFIER).image;
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
      jj_consume_token(51);
      value = jj_consume_token(INTEGER_LITERAL).image;
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(50);
        if (name != null) {
                        if (parser.verbose) System.out.println("VariableDeclaration: " + name + " = " + value);
                        parser.addValue( name, value );
                }
  }

  static final public PacketTemplate StructDeclaration() throws ParseException {
        Token t = null; PacketTemplate packet = new PacketTemplate(); boolean newDefinition = false;
    StructOrUnionSpecifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        StructExpansion(packet);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
                                                           newDefinition = true;
        StructBody(packet);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      break;
    case 52:
    case 54:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        StructExpansion(packet);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
                                         newDefinition = true;
      StructBody(packet);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (parser.verbose){
                        System.out.println("STRUCT new " + newDefinition );
                        if (t!=null)
                                System.out.println("NAME " + t.image );
                }

                if (newDefinition) {
                        if (t != null) {
                       // struct defined, store it for later use
                           packet.typeName = t.image;
                           packet.size = packet.packetSize;
                           parser.addStruct( packet.typeName, packet);
                        }
            } else {
                        packet = (PacketTemplate) parser.structs.get( t.image );
                        if ( packet == null )
                                {if (true) throw new ParseException("referenced struct " + t.image + " not defined" );}
       }
           {if (true) return packet;}
    throw new Error("Missing return statement in function");
  }

  static final public void StructBody(PacketTemplate packet) throws ParseException {
    jj_consume_token(52);
    label_2:
    while (true) {
      if (jj_2_3(1)) {
        ;
      } else {
        break label_2;
      }
      MemberDeclaration(packet);
    }
    jj_consume_token(53);
  }

  static final public void StructExpansion(PacketTemplate packet) throws ParseException {
        Token parent; Token expansionField; Token guardField = null; Token guardValue = null;
    jj_consume_token(54);
    parent = jj_consume_token(IDENTIFIER);
    jj_consume_token(55);
    expansionField = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 56:
      jj_consume_token(56);
      guardField = jj_consume_token(IDENTIFIER);
      jj_consume_token(57);
      guardValue = jj_consume_token(IDENTIFIER);
      jj_consume_token(58);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
                   PacketTemplate parentPacket = (PacketTemplate) parser.types.get( parent.image);
                   if (parentPacket == null) {
                                parentPacket = (PacketTemplate) parser.structs.get(parent.image);
                   }
                   if (parentPacket == null) {
                                {if (true) throw new ParseException("Parent struct or type "+parent.image+" not defined");}
                   }
                   packet.parent = parentPacket;
               packet.expands = parentPacket.getAttribute(expansionField.image);
               if (guardField != null) {
                       packet.guardField = parentPacket.getAttribute( guardField.image);
                       if (packet.guardField == null)
                                {if (true) throw new ParseException("Parent struct guard field "+guardField.image+" not exists");}
                       String guardValueString = guardValue.image;
                       if (parser.values.containsKey(guardValue.image)) {
                           guardValueString = (String) parser.values.get(guardValue.image);
                       }
                   try {
                           packet.guardValue = Integer.parseInt(guardValueString);
                       } catch (Exception e) {
                           e.printStackTrace();
                       };
               }
               packet.fieldOffset = parentPacket.getAttribute(expansionField.image).offset;

               if (packet.expands == null)
                        {if (true) throw new ParseException("Parent struct field "+packet.expands+" not exists");}

               if (packet.packetSize == -1)
                        {if (true) throw new ParseException("Parent struct field "+packet.expands+" not exists");}
  }

  static final public void MemberDeclaration(PacketTemplate packet) throws ParseException {
                                                   TypeSpecifier typeSpec; Token name;
   Token integerLiteral = null; String field = null; boolean isArray = false;
    typeSpec = TypeSpecifier();
    name = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      jj_consume_token(59);
                                                               isArray = true;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          field = Field();
          break;
        case INTEGER_LITERAL:
          integerLiteral = jj_consume_token(INTEGER_LITERAL);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(60);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(50);
                int elementsInt = 1;

                if (field != null) {
                // check for already defined constant
                        String value = (String) parser.values.get( field );
                        if (value != null) {
                                elementsInt = Integer.parseInt(value);
                        } else {
                                packet.fixedLength = false;
                                packet.lengthField = packet.getAttribute( field );
                                if ( packet.lengthField == null) {
                                {if (true) throw new ParseException("Variable array size field '"+field+"' does not exist");}
                                }
                                packet.lengthPos = packet.lengthField.offset;
                                packet.lengthOffset = 0;
                                elementsInt = PacketTemplate.variableSizedDirect;
                        }
                } else if (integerLiteral != null){
                elementsInt = Integer.parseInt(integerLiteral.image);
                } else if (isArray) {
                        elementsInt = PacketTemplate.variableSizedIndirect;
                }

        packet.addAttribute( name.image, typeSpec, elementsInt);
        if (parser.verbose) System.out.println("Adding " + name.image + " of type " + typeSpec.typeName);
  }

  static final public Token TypedefName() throws ParseException {
                        Token t;
    t = jj_consume_token(IDENTIFIER);
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public TypeSpecifier TypeSpecifier() throws ParseException {
                                  String type = ""; Token t; TypeSpecifier typeSpec = new TypeSpecifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      jj_consume_token(CONST);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED:
    case SIGNED:
      SignedSpecifier(typeSpec);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
                   /* ??? */ {if (true) return typeSpec;}
      break;
    case CHAR:
      jj_consume_token(CHAR);
                   typeSpec.size = 1 ; {if (true) return typeSpec;}
      break;
    case SHORT:
      jj_consume_token(SHORT);
                   typeSpec.size = 2 ; {if (true) return typeSpec;}
      break;
    case INT:
      jj_consume_token(INT);
                   typeSpec.size = 2 ; {if (true) return typeSpec;}
      break;
    case LONG:
      jj_consume_token(LONG);
                   typeSpec.size = 4 ; {if (true) return typeSpec;}
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
                   typeSpec.size = 8 ; {if (true) return typeSpec;}
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
                   typeSpec.size = 8 ; {if (true) return typeSpec;}
      break;
    default:
      jj_la1[14] = jj_gen;
      if (parser.isType(getToken(1).image)) {
        t = TypedefName();
                                      {if (true) return (TypeSpecifier) parser.types.get(t.image) ;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRUCT:
        case UNION:
          typeSpec = StructDeclaration();
                                            {if (true) return typeSpec;}
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public TypeSpecifier SignedSpecifier(TypeSpecifier typeSpec) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED:
      jj_consume_token(UNSIGNED);
                typeSpec.signed = false; {if (true) return typeSpec;}
      break;
    case SIGNED:
      jj_consume_token(SIGNED);
                typeSpec.signed = true;  {if (true) return typeSpec;}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Declarator() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

  static final public void StructOrUnionSpecifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRUCT:
      jj_consume_token(STRUCT);
      break;
    case UNION:
      jj_consume_token(UNION);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Assignment() throws ParseException {
                      String name; String value;
    name = Field();
    jj_consume_token(51);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      value = jj_consume_token(INTEGER_LITERAL).image;
      break;
    case STRING_LITERAL:
      value = jj_consume_token(STRING_LITERAL).image;
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(50);
        if (parser.verbose) System.out.println("Assignement: " + name + " = " + value);
        parser.addValue( name, value);
  }

  static final public String Field() throws ParseException {
                   String name = "" ; String sub = "";
    name = jj_consume_token(IDENTIFIER).image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      jj_consume_token(55);
      sub = Field();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
        if (sub != "")
                        {if (true) return name + "." + sub;}
                else
                        {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  static final public String IntegerExpression() throws ParseException {
                               String value; String varName;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      value = jj_consume_token(INTEGER_LITERAL).image;
                {if (true) return value;}
      break;
    case IDENTIFIER:
      varName = jj_consume_token(IDENTIFIER).image;
                // check for identifiers, too..

                value = (String) parser.values.get(varName);
                if (value == null)
                        {if (true) throw new ParseException("Variable "+varName+ " not set");}
                {if (true) return value;}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_3R_9() {
    if (jj_scan_token(TYPEDEF)) return true;
    return false;
  }

  static final private boolean jj_3R_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_21() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_7() {
    if (jj_3R_10()) return true;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_3R_4()) return true;
    return false;
  }

  static final private boolean jj_3R_6() {
    if (jj_3R_9()) return true;
    return false;
  }

  static final private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_3()) return true;
    return false;
  }

  static final private boolean jj_3R_10() {
    if (jj_3R_21()) return true;
    return false;
  }

  static final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_24() {
    if (jj_3R_27()) return true;
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_3R_5()) return true;
    return false;
  }

  static final private boolean jj_3R_11() {
    if (jj_3R_22()) return true;
    return false;
  }

  static final private boolean jj_3R_26() {
    if (jj_scan_token(SIGNED)) return true;
    return false;
  }

  static final private boolean jj_3R_25() {
    if (jj_scan_token(UNSIGNED)) return true;
    return false;
  }

  static final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_20() {
    if (jj_3R_24()) return true;
    return false;
  }

  static final private boolean jj_3R_19() {
    if (jj_3R_23()) return true;
    return false;
  }

  static final private boolean jj_3R_18() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static final private boolean jj_3R_4() {
    if (jj_3R_8()) return true;
    return false;
  }

  static final private boolean jj_3R_17() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static final private boolean jj_3R_16() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  static final private boolean jj_3R_15() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static final private boolean jj_3R_5() {
    if (jj_3R_8()) return true;
    return false;
  }

  static final private boolean jj_3R_14() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  static final private boolean jj_3R_13() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  static final private boolean jj_3R_12() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  static final private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = parser.isType(getToken(1).image);
    lookingAhead = false;
    if (!jj_semLA || jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x80,0x0,0x0,0x10040000,0x200000,0x84000000,0x10040000,0x84000000,0x4080,0x0,0x80,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x8000,0x8000,0x80000,0x400000,0x100000,0x400000,0x508000,0x1000000,0x8000,0x8000,0x8000000,0x1,0x0,0x1326,0x0,0x0,0x0,0x0,0x800000,0x8000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[61];
    for (int i = 0; i < 61; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                                 }
